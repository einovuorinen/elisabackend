{"version":3,"sources":["components/SearchForm.js","components/Favoritebutton.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","className","onSubmit","search","onChange","getResultsbyChannel","channelData","map","channel","value","id","name","type","date","getResultsByDate","FavoriteButton","favorites","find","x","onClick","favorite","Display","f","filter","toLowerCase","displayData","item","includes","description","key","rightColumn","Filter","NavbarText","filterResults","Notification","message","App","useState","setchannel","setdate","programData","setProgramData","setFilter","channelKeys","setChannelKeys","livePrograms","setLivePrograms","localStorage","JSON","parse","setFavorites","notif","setNotification","channelsIsOpen","setChannelsIsOpen","searchIsOpen","setSearchIsOpen","liveIsOpen","setLiveIsOpen","favoritesIsOpen","setFavoritesIsOpen","useEffect","axios","get","then","response","data","event","a","preventDefault","post","setItem","stringify","setTimeout","concat","elem","Navbar","NavbarToggler","target","style","display","program","shortDescription","startTime","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.e3065b8c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst SearchForm = (props) => {\r\n    return(\r\n      <div  className='belowNav'>\r\n      Search for a program\r\n      <form onSubmit={props.search} className='searchForm'>\r\n        channel: \r\n          <select onChange={props.getResultsbyChannel}>\r\n            {props.channelData.map(channel => <option value={channel.id}>{channel.name}</option>)}\r\n          </select>\r\n        date: <input type='date'\r\n              value={props.date}\r\n              onChange={props.getResultsByDate}\r\n          />\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm","import React from 'react'\r\n\r\nconst FavoriteButton = (props) => {\r\n    if (!props.favorites.find(x => x.id === props.id)) {\r\n      return <button className='favoriteButton' onClick={() => props.favorite(props.id, props.type)}>Favorite</button>\r\n    } else {\r\n      return <button className='favoriteButton' onClick={() => props.favorite(props.id, props.type)}>Remove from Favorites</button>\r\n    }\r\n}\r\n\r\nexport default FavoriteButton","import React from 'react'\r\nimport FavoriteButton from './Favoritebutton'\r\n\r\nconst Display = (props) => {\r\n    const f = props.filter.toLowerCase()\r\n    return (\r\n        <table className='table'>\r\n          {props.displayData.filter(item => (item.name && item.name.toLowerCase().includes(f)) || (item.description && item.description.toLowerCase().includes(f)))\r\n            .map(item => {\r\n              return (\r\n                <tr key={item.id}>\r\n                  <td className='firstColumn'>{item.name}</td>\r\n                  <td>{item.rightColumn}</td>\r\n                  <td><FavoriteButton favorite={props.favorite} favorites={props.favorites} type={item.type} id={item.id}/></td>\r\n                </tr>)}\r\n            )}\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Display","import React, { useState, useEffect } from 'react'\nimport { Navbar, NavbarToggler, NavbarText } from 'reactstrap'\nimport axios from 'axios'\nimport SearchForm from './components/SearchForm'\nimport Display from './components/Display'\n\nconst Filter = (props) => {\n\treturn (\n\t  <div>\n    \t<NavbarText>Keywords:</NavbarText><input \n        \tvalue={props.filter}\n        \tonChange={props.filterResults}\n    \t/>\n\t  </div>\n\t)\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className='alert alert-primary'>\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n\n  const [channel, setchannel] = useState(37) // yle1 id as default\n  const [date, setdate] = useState('')\n  const [programData, setProgramData] = useState([])\n  const [filter, setFilter] = useState('')\n  const [channelKeys, setChannelKeys] = useState([])\n  const [livePrograms, setLivePrograms] = useState([])\n  const [favorites, setFavorites] = useState(localStorage.favorites ? JSON.parse(localStorage.favorites) : [])\n  const [notif, setNotification] = useState(null)\n\n  const [channelsIsOpen, setChannelsIsOpen] = useState(true)\n  const [searchIsOpen, setSearchIsOpen] = useState(false)\n  const [liveIsOpen, setLiveIsOpen] = useState(false)\n  const [favoritesIsOpen, setFavoritesIsOpen] = useState(false)\n\n  const toggleChannel = () => {\n    setSearchIsOpen(false)\n    setChannelsIsOpen(true)\n    setLiveIsOpen(false)\n    setFavoritesIsOpen(false)\n    setFilter('')\n  }\n  const toggleSearch = () => {\n    setSearchIsOpen(true)\n    setChannelsIsOpen(false)\n    setLiveIsOpen(false)\n    setFavoritesIsOpen(false)\n    setFilter('')\n  }\n  const toggleLive = () => {\n    setSearchIsOpen(false)\n    setChannelsIsOpen(false)\n    setLiveIsOpen(true)\n    setFavoritesIsOpen(false)\n    setFilter('')\n  }\n\n  const toggleFavorites = () => {\n    setSearchIsOpen(false)\n    setChannelsIsOpen(false)\n    setLiveIsOpen(false)\n    setFavoritesIsOpen(true)\n    setFilter('')\n  }\n\n  const hook = () => {\n    axios\n      .get('/channelnames')\n      .then(response => {\n        setChannelKeys(response.data)\n      })\n    axios\n      .get('/liveprograms')\n      .then(response => {\n        setLivePrograms(response.data)\n      })\n  }\n  \n  useEffect(hook, [])\n\n  const getResultsbyChannel = (event) => {\n    setchannel(event.target.value)\n  }\n\n  const getResultsByDate = (event) => {\n    setdate(event.target.value)\n  }\n\n  const search = async (event) => {\n    event.preventDefault()\n    const response = await axios.post('/search', {channel: channel, date: date})\n    setProgramData(response.data)\n  }\n\n  const filterResults = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const favorite = (id, type) => {\n    if (!favorites.find(x => x.id === id)) {\n      switch (type) {\n        case 'program':\n          setFavorites(favorites.concat(programData.find(elem => elem.id === id)))\n          break\n        case 'liveProgram':\n          setFavorites(favorites.concat(livePrograms.find(elem => elem.id === id)))\n          break\n        case 'channel':\n          setFavorites(favorites.concat(channelKeys.find(elem => elem.id === id)))\n          break\n        default: return\n      }\n      localStorage.setItem('favorites', JSON.stringify(favorites))\n      setNotification(`Added ${type} to favorites`)\n      setTimeout(() => {\n        setNotification(null)\n        }, 2500)\n    } else {\n      setFavorites(favorites.filter(item => item.id != id))\n      localStorage.setItem('favorites', JSON.stringify(favorites))\n      setNotification(`Removed ${type} from favorites`)\n      setTimeout(() => {\n        setNotification(null)\n        }, 2500)\n      return\n    }\n  }\n\n  return (\n    <div className='App'>\n      <Navbar className='dark'>\n        <NavbarToggler onClick={toggleChannel}>All Channels</NavbarToggler>\n        <NavbarToggler onClick={toggleSearch}>Search</NavbarToggler>\n        <NavbarToggler onClick={toggleLive}>Live Programs</NavbarToggler>\n        <NavbarToggler onClick={toggleFavorites}>Favorites</NavbarToggler>\n        <Filter\n          filter={filter}\n          filterResults={filterResults}\n        />\n      </Navbar>\n      <Notification message={notif}/>\n      <div style={{ display: searchIsOpen ? '' : 'none' }}>\n        <SearchForm\n          channelData={channelKeys}\n          channel={channel}\n          date={date}\n          getResultsbyChannel={getResultsbyChannel}\n          getResultsByDate={getResultsByDate}\n          search={search}\n        />\n        <Display\n          displayData={programData.map(program => {\n            return ({\n              type:'program',\n              id:program.id,\n              name:program.name,\n              description:program.shortDescription,\n              rightColumn:program.startTime\n            })\n          })}\n          filter={filter}\n          favorite={favorite}\n          favorites={favorites}\n        />\n      </div>\n      <div style={{ display: channelsIsOpen ? '' : 'none' }}>\n        <div className='belowNav'>These are all the available channels</div>\n        <Display\n          displayData={channelKeys.map(channel => {\n            return ({\n              type:'channel',\n              id:channel.id,\n              name:channel.name,\n              description:channel.description,\n              rightColumn:channel.id\n            })\n          })}\n          filter={filter}\n          favorite={favorite}\n          favorites={favorites}\n        />\n      </div>\n      <div style={{ display: liveIsOpen ? '' : 'none'}}>\n        <div className='belowNav'>These are currently live programs</div>\n        <Display\n          displayData={livePrograms.map(program => {\n            return ({\n              type:'liveProgram',\n              id:program.id,\n              name:program.name,\n              description:program.shortDescription,\n              rightColumn:program.startTime\n            })\n          })}\n          filter={filter}\n          favorite={favorite}\n          favorites={favorites}\n        />\n      </div>\n      <div style={{ display: favoritesIsOpen ? '' : 'none'}}>\n        <div className='belowNav'>These are your favorites</div>\n        <Display\n          displayData={favorites.map(item => {\n            return ({\n              type:'item',\n              id:item.id,\n              name:item.name,\n              description:item.shortDescription,\n              rightColumn:item.type\n            })\n          })}\n          filter={filter}\n          favorite={favorite}\n          favorites={favorites}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}